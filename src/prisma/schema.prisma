generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ERole {
  ADMIN
  USER

  @@map("erole")
}

enum EGender {
  MALE
  FEMALE
  OTHER

  @@map("egender")
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String         @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  gender       EGender?
  dateOfBirth  DateTime?
  avatarFileId String?        @unique
  avatarFile   File?          @relation("AvatarFileOfUser", fields: [avatarFileId], references: [id])
  createdFiles File[]         @relation("FilesOfUser")
  phoneNumber  String?        @db.VarChar(255)
  roles        ERole[]        @default([USER])
  userLogin    UserLogin?
  sessions     UserSession[]
  externals    UserExternal[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  @@map("users")
}

model UserLogin {
  userId               Int       @id
  user                 User      @relation(fields: [userId], references: [id])
  username             String?
  email                String    @db.VarChar(255)
  isEmailVerified      Boolean   @default(false)
  emailVerifyToken     String?
  emailVerifyTokenAt   DateTime?
  password             String
  passwordResetToken   String?
  passwordResetTokenAt DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?

  @@map("user_logins")
}

model UserSession {
  id           String    @id @default(uuid())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  refreshToken String
  expiredAt    DateTime
  userAgent    String?
  userIp       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@map("user_sessions")
}

enum EUserExternalProvider {
  GOOGLE
  FACEBOOK

  @@map("euser_external_provider")
}

model UserExternal {
  id            Int                   @id @default(autoincrement())
  userId        Int                   @unique
  user          User                  @relation(fields: [userId], references: [id])
  provider      EUserExternalProvider
  providerId    String
  providerToken String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  deletedAt     DateTime?

  @@map("user_externals")
}

model File {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  path        String    @db.VarChar(255)
  size        Int
  mimeType    String    @db.VarChar(255)
  createdBy   User?     @relation("FilesOfUser", fields: [createdById], references: [id])
  createdById Int?
  userAvatar  User?     @relation("AvatarFileOfUser")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("files")
}
