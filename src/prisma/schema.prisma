generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ERole {
  ADMIN
  USER
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                 Int             @id @default(autoincrement())
  firstName          String          @db.VarChar(50)
  lastName           String?         @db.VarChar(50)
  gender             EGender?
  dateOfBirth        DateTime?
  avatarImageFileId  String?
  avatarImageFileUrl String?
  phoneNumber        String?         @db.VarChar(15)
  roles              ERole[]         @default([USER])
  userLogin          UserLogin?
  sessions           UserSession[]
  externals          UserExternal[]
  projects           ProjectMember[]
  fcmTokens          FcmToken[]
  notifications      Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLogin {
  userId               Int       @id
  user                 User      @relation(fields: [userId], references: [id])
  username             String?
  email                String    @db.VarChar(255)
  isEmailVerified      Boolean   @default(false)
  emailVerifyToken     String?
  emailVerifyTokenAt   DateTime?
  password             String
  passwordResetToken   String?
  passwordResetTokenAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSession {
  id           String   @id @default(uuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  expiredAt    DateTime
  userAgent    String?
  userIp       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EUserExternalProvider {
  GOOGLE
  FACEBOOK
}

model UserExternal {
  id            Int                   @id @default(autoincrement())
  userId        Int                   @unique
  user          User                  @relation(fields: [userId], references: [id])
  provider      EUserExternalProvider
  providerId    String
  providerToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EProjectStatus {
  ACTIVE
  INACTIVE
}

model Project {
  id              String          @id @default(uuid())
  name            String          @db.VarChar(50)
  imageFileId     String?
  imageFileUrl    String?         @db.Text
  description     String?         @db.VarChar(255)
  metaData        Json?
  status          EProjectStatus  @default(ACTIVE)
  location        Float[]         @default([])
  webDashboard    Json?
  mobileDashboard Json?
  members         ProjectMember[]
  devices         Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EProjectMemberRole {
  OWNER
  DEVELOPER
  GUEST
}

model ProjectMember {
  projectId String
  project   Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    Int
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      EProjectMemberRole

  @@id([projectId, userId])
}

enum EDeviceStatus {
  ONLINE
  OFFLINE
}

enum EDeviceHardware {
  ESP8266
  ESP32
  RASPBERRY_PI
}

enum EDeviceConnection {
  WIFI
  ETHERNET
}

model Device {
  id              String            @id @default(uuid())
  projectId       String
  project         Project           @relation(fields: [projectId], references: [id])
  name            String            @db.VarChar(50)
  description     String?           @db.VarChar(255)
  authToken       String?           @unique
  authTokenExpiry DateTime?
  imageFileId     String?
  imageFileUrl    String?
  status          EDeviceStatus     @default(OFFLINE)
  hardware        EDeviceHardware
  connection      EDeviceConnection
  /// [TDeviceMetaData]
  metaData        Json?
  lastOnline      DateTime?
  datastreams     Datastream[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EDatastreamType {
  DIGITAL
  ANALOG
  VIRTUAL
  ZIGBEE
}

enum EDatastreamMode {
  INPUT
  OUTPUT
  INPUT_PULLUP
  INPUT_PULLDOWN
}

enum EDatastreamDataType {
  INTEGER
  FLOAT
  STRING
  JSON
}

model Datastream {
  id             String               @id @default(uuid())
  deviceId       String
  device         Device               @relation(fields: [deviceId], references: [id])
  name           String               @db.VarChar(50)
  iconId         Int?
  color          String?              @db.VarChar(20)
  type           EDatastreamType
  mac            String?              @unique @db.VarChar(20)
  pin            String?              @db.VarChar(50)
  mode           EDatastreamMode?
  dataType       EDatastreamDataType?
  minValue       Float?
  maxValue       Float?
  defaultValue   String?
  unit           String?              @db.VarChar(50)
  enabledHistory Boolean              @default(false)
  values         DatastreamValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deviceId])
}

enum EAppType {
  NBYD_WEBAPP
  NBYD_MOBILEAPP
}

model FcmToken {
  token   String
  userId  Int
  user    User     @relation(fields: [userId], references: [id])
  appType EAppType

  createdAt DateTime @default(now())

  @@id([token, userId])
}

enum ENotificationType {
  GENERAL
}

model Notification {
  id     String            @id @default(uuid())
  type   ENotificationType @default(GENERAL)
  data   Json?
  userId Int
  user   User              @relation(fields: [userId], references: [id])
  isRead Boolean           @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, type, isRead])
}

model DatastreamValue {
  datastreamId String
  datastream   Datastream @relation(fields: [datastreamId], references: [id])
  value        String
  createdAt    DateTime   @default(now())

  @@unique([datastreamId, value, createdAt])
  @@index(fields: [createdAt], map: "datastream_value_created_at_idx")
}
